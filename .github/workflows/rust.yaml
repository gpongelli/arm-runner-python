name: Build RPI images
on:
  push:
  workflow_dispatch:

env:
  NEW_CARGO_HOME: "/opt/rust/cargo"
  NEW_RUSTUP_HOME: "/opt/rust/rustup"
  NEW_PATH: "$PATH"
  NEW_LD_LIB_PATH: "$LD_LIBRARY_PATH"


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  create_image:
    name: Rust Build on ${{ matrix.arch }} - py${{ matrix.python-sw }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-sw: [ "3.11.1" ]
        arch: [ armv6l, armv7l, aarch64 ]
        include:
# arm1176 is the CPU of BCM2835 which is the SOC of first generation RaspberryPi and RaspberryPi Zero.
        - arch: armv6l
          cpu: arm1176
          # base_image: raspios_lite:latest
          base_image: https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2022-09-26/2022-09-22-raspios-bullseye-armhf-lite.img.xz

# cortex-a7 equivalent to cortex-a7:cortex-a53. Optimized for later Pi models (Pi 3/Pi 4 and Pi Zero 2).
# Not suitable for Pi 1/Pi 2/Pi Zero.
        - arch: armv7l
          cpu: cortex-a7
          # base_image: raspios_lite:latest
          base_image: https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2022-09-26/2022-09-22-raspios-bullseye-armhf-lite.img.xz

# cortex-a53 is the 64 bits CPU of the first 64 bits Raspberry Pi models
        - arch: aarch64
          cpu: cortex-a53
          # base_image: raspios_lite_arm64:latest
          base_image: https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2022-09-26/2022-09-22-raspios-bullseye-arm64-lite.img.xz

    steps:
      - uses: actions/checkout@v3

      - name: Split Python version
        uses: JungWinter/split@v2.1.0
        id: split
        with:
          msg: ${{ matrix.python-sw }}
          separator: '.'

      - id: get_short_sha
        uses: actions/github-script@v6.4.0
        with:
          script: |
            const short_sha = '${{ github.sha }}'.substr(0, 7)
            core.setOutput('short_sha', short_sha)

      - name: Define the names
        id: image_and_branch_name
        run: |
          if [ ${GITHUB_REF/refs\/tags\//} != ${GITHUB_REF} ]; then
            echo "RELEASE_NAME=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME_SUFFIX=${GITHUB_REF/refs\/tags\//}-${{ matrix.arch }}-py${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }}" >> $GITHUB_OUTPUT
          elif [ ${GITHUB_REF/refs\/heads\//} != "${GITHUB_REF}" ]; then
            echo "RELEASE_NAME=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME_SUFFIX=${GITHUB_REF/refs\/heads\//}-${{ steps.get_short_sha.outputs.short_sha }}-${{ matrix.arch }}-py${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }}" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NAME=${GITHUB_REF}" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME_SUFFIX=${GITHUB_REF//\//-}-${{ matrix.arch }}-py${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }}" >> $GITHUB_OUTPUT
          fi

      - name: Create release image
        uses: pguyot/arm-runner-action@v2
        id: arm_runner_install
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          cpu_info: ${{ matrix.cpu_info }}
          shell: bash
          copy_repository_path: /opt/repo
          image_additional_mb: 4096
          commands: |
            mkdir -p $NEW_CARGO_HOME $NEW_RUSTUP_HOME 
            sudo apt update
            sudo apt install -y --no-install-recommends autoconf automake bison byacc build-essential cscope curl diffstat dpkg flex gcc gettext git indent intltool libasound2-dev libatlas-base-dev libffi-dev libgdbm-dev libgfortran5 liblapack-dev libmpg123-dev libncurses5-dev libnss3-dev libopenblas-dev libssl-dev libtool openssl patch patchutils rcs swig systemtap tree universal-ctags wget xz-utils zlib1g-dev zram-tools
            export CARGO_HOME=$NEW_CARGO_HOME
            export RUSTUP_HOME=$NEW_RUSTUP_HOME
            curl https://sh.rustup.rs -sSf | bash -s -- -y
            [ -d $NEW_CARGO_HOME/.cargo ] || cat $NEW_CARGO_HOME/.cargo/env > /etc/profile.d/rust.sh
            [ -f $NEW_CARGO_HOME/env ] || cat $NEW_CARGO_HOME/env > /etc/profile.d/rust.sh
            export PATH=$NEW_CARGO_HOME/bin:$PATH
            find / -iname rustc
            source /etc/profile.d/rust.sh
            rustc --version
            echo 'export PATH=$NEW_PATH' >> /etc/profile.d/env.sh
            echo 'export LD_LIBRARY_PATH=$NEW_LD_LIB_PATH' >> /etc/profile.d/env.sh
            echo 'export CRYPTOGRAPHY_DONT_BUILD_RUST=1' >> /etc/profile.d/env.sh
            sudo apt-get autoremove --purge -y
            sudo apt-get clean

